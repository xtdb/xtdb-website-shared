---
import Play from 'astro-heroicons/solid/Play.astro';
import ArrowTopRightOnSquare from 'astro-heroicons/solid/ArrowTopRightOnSquare.astro';
import { gensym } from './utils';

const { hidden, q } = Astro.props;

const id = gensym();

var props = {
    'data-id': id,
    'data-hidden': hidden ? 'true' : undefined,
    'data-query': q.trim(),
}
---
<div class:list={[{hidden: hidden}, "p-1 bg-gray-100 dark:bg-gray-800 rounded-md"]}>
    <xtplay-query {...props} />
</div>

{/* Buttons: */}
<div class="flex flex-row gap-2 items-center">
    <div data-parent-id={id}
         data-id="run"
         class="px-2 bg-gray-300 hover:bg-gray-400/70 dark:bg-gray-600 dark:hover:bg-gray-700 cursor-pointer rounded-md">
        <div class="flex flex-row items-center gap-1">
            Run
            <Play class="size-4" />
        </div>
    </div>
    <svg data-parent-id={id}
         data-id="spinner"
         class="hidden animate-spin h-5 w-5 text-gray"
         xmlns="http://www.w3.org/2000/svg"
         fill="none"
         viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <div class="flex-grow" />
    <span data-parent-id={id}
          data-id="open-in-xtplay"
          class="cursor-pointer underline">
        Open in xt-play
        <ArrowTopRightOnSquare class="size-3" />
    </span>
</div>

<script>
    import { XtPlayComponent } from "./xtplay.js"
    import { makeEditor } from "./editor.ts"

    class XtPlayQuery extends XtPlayComponent {
        connectedCallback() {
            super.connectedCallback();
            this._registry.registerQuery(this);

            this.editor;
            if (!this.dataset.hidden) {
                this.editor = makeEditor({
                    initialText: this.dataset.query,
                    parent: this,
                });
            }

            this.spinner = document.querySelector(`[data-parent-id="${this.dataset.id}"][data-id="spinner"]`);

            const run_button = document.querySelector(`[data-parent-id="${this.dataset.id}"][data-id="run"]`);
            run_button.addEventListener('click', () => {
                this._showSpinner();
                this._registry.render();
            });

            const edit_button = document.querySelector(`[data-parent-id="${this.dataset.id}"][data-id="open-in-xtplay"]`);
            edit_button.addEventListener('click', () => {
                this._registry.openInXtPlay();
            });

            this._registry.on("fetchComplete", () => {
                this._hideSpinner();
            });
        }

        _showSpinner() {
            this.spinner.classList.remove('hidden');
        }

        _hideSpinner() {
            this.spinner.classList.add('hidden');
        }

        get query() {
            if (this.editor) {
                return this.editor.state.doc.toString();
            } else {
                return this.dataset.query;
            }
        }
    }

    customElements.define('xtplay-query', XtPlayQuery);
</script>
