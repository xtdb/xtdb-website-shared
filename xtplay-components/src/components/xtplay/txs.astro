---
const { hidden, systemTime, txs } = Astro.props;

var props = {
    'data-txs': txs.trim()
}

if (hidden) {
    props['data-hidden'] = 'true';
}

if (systemTime) {
    props['data-system-time'] = systemTime;
}
---
<div class:list={[{hidden: hidden}, "relative flex flex-col"]}>
    { systemTime && <div class="px-1 mx-auto max-lg:after:content-[':'] lg:mx-0 lg:absolute lg:top-0 lg:right-0">{systemTime}</div> }
    <div class="p-1 bg-gray-100 dark:bg-gray-800 rounded-md">
        <xtplay-txs {...props} />
    </div>
</div>

<script>
    import { XtPlayComponent } from "./xtplay.js"
    import { makeEditor } from "./editor.ts"
    import { highlightSql } from "./utils.js"

    class XtPlayTxs extends XtPlayComponent {
        connectedCallback() {
            super.connectedCallback();
            this._registry.registerTxs(this);

            // Use an editor if a query is added
            this.editor;
            if (!this.dataset.hidden) {
                // If there's a query editor, this should also be an editor
                if (this._registry.query && !this._registry.isTemplate) {
                    this._setupEditor();
                } else {
                    // In case the query is added later
                    this._registry.on("registerQuery", _ => {
                        this._setupEditor();
                    });

                    // Otherwise, let's render this as a code block
                    let highlight = highlightSql(this.dataset.txs);
                    this.innerHTML = '<pre class="overflow-x-auto text-sm">' + highlight.value + '</pre>';
                }
            }
        }

        _setupEditor() {
            if (!this.editor) {
                this.innerHTML = "";
                this.editor = makeEditor({
                    initialText: this.dataset.txs,
                    parent: this,
                });
            }
        }

        get txs() {
            if (this.editor) {
                return this.editor.state.doc.toString();
            } else {
                return this.dataset.txs;
            }
        }
    }

    customElements.define('xtplay-txs', XtPlayTxs);
</script>
